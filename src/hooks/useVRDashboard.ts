
import { useState, useEffect } from "react";
import { supabase } from "@/integrations/supabase/client";
import { useNavigate } from "react-router-dom";
import { useToast } from "@/hooks/use-toast";

export const useVRDashboard = () => {
  const [loading, setLoading] = useState(true);
  const [profile, setProfile] = useState<any>(null);
  const [error, setError] = useState<string | null>(null);
  const { toast } = useToast();
  const navigate = useNavigate();

  useEffect(() => {
    const loadUserAndProfile = async () => {
      try {
        // Check if user is authenticated
        const { data: { session } } = await supabase.auth.getSession();
        
        if (!session) {
          navigate('/vr/signin');
          return;
        }

        // Check for existing profile
        const { data: existingProfile, error: profileError } = await supabase
          .from('virtual_recruiter_profiles')
          .select('*')
          .eq('id', session.user.id)
          .maybeSingle();

        if (profileError) {
          console.error('Error fetching VR profile:', profileError);
          setError('Failed to load your profile information. Please try again later.');
        }

        // If profile doesn't exist, create it
        if (!existingProfile) {
          try {
            console.log('Creating missing VR profile for user:', session.user.id);
            
            // Get user's role to verify they should have VR access
            const { data: roleData } = await supabase
              .from('user_roles')
              .select('role')
              .eq('user_id', session.user.id)
              .maybeSingle();
              
            if (!roleData || roleData.role !== 'vr') {
              setError('You do not have Virtual Recruiter permissions. Please contact support.');
              setLoading(false);
              return;
            }
            
            // Insert profile with required fields
            // Note: vr_number is automatically generated by a database trigger
            // We need to use type assertion to bypass TypeScript's strict checking
            const { data: newProfile, error: createError } = await supabase
              .from('virtual_recruiter_profiles')
              .insert({
                id: session.user.id,
                full_name: session.user.user_metadata.full_name || 'New User',
                email: session.user.email || '',
                location: 'Not specified', // Default location
                bank_account_verified: false,
                is_active: true,
                // vr_number is handled by a database trigger
              } as any) // Using type assertion to bypass TypeScript's strict checking
              .select('*')
              .single();
            
            if (createError || !newProfile) {
              console.error('Error creating VR profile:', createError);
              setError('Failed to create your profile. Please contact support.');
              setLoading(false);
              return;
            }
            
            setProfile(newProfile);
            
            toast({
              title: "Profile Created",
              description: "Your Virtual Recruiter profile has been created successfully."
            });
          } catch (err) {
            console.error('Error in profile creation:', err);
            setError('Failed to create your profile. Please contact support.');
          }
        } else {
          setProfile(existingProfile);
        }

        setLoading(false);
      } catch (err) {
        console.error('Dashboard loading error:', err);
        setError('An unexpected error occurred. Please try again later.');
        setLoading(false);
      }
    };

    loadUserAndProfile();
  }, [navigate, toast]);

  // Calculate stats from profile data
  const totalReferrals = profile?.recommendations_count || 0;
  const successfulPlacements = profile?.successful_placements || 0; 
  const pendingRecommendations = totalReferrals - successfulPlacements;

  return { 
    loading, 
    error, 
    profile,
    stats: {
      totalReferrals,
      successfulPlacements,
      pendingRecommendations
    }
  };
};
